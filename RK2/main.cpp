#include <QCoreApplication>
#include "zadachi.h"
#include <iostream>

using namespace std;

int main(int argc, char *argv[]){
    QCoreApplication a(argc, argv);
    zadachi rt;

//    rt.Add(); // 1 Найти сумму чисел расположенных на четных/нечетных позициях в массиве(рекурсивно)
//    rt.convert_two_to_sixteen(); // 2. выполнить перевод чисел (представленных в char*) из двоичной системы счисления в шестнадцатиричную
//  2.1. перевод чисел из одной системы счисления в другую (рекурсивно)
//    std::cout << std::endl;
//    rt.print_array();
//    rt.task_3(); // 3 Функция сортировки элементов массива расположенных четных позициях
//    std::cout << std::endl;
//    rt.print_array();
//    rt.task_3_5(); // 3.5. функцию сортировки элементов массива распложенных на нечётных позициях
//    rt.print_array();
//    rt.triandl90(15); // 4 Нарисовать треугольник в консоли повёрнутый на 90 градусов
//    rt.triandl180(15); // 4.1 Нарисовать треугольник в консоли повёрнутый на 180 градусов
//    rt.triandl270(15); // 4.2 Нарисовать треугольник в консоли повёрнутый на 270 градусов
// 5. написать бинарный поиск (рекурсивно)
// 6. написать обход элементов двусвязного списка (рекурсивно)
// 7. написать определение структуры, которая хранит ссылку на N таких же структур, написать функцию обхода всех элементов
// 7.8. Написать описание класса односвязного списка и описать конструкторы и деструкторы и показать как будет освобождаться память при удалении объекта.

    //    rt.print_array();
//    rt.on_the_back(); // 8 Вывести массив наоборот (рекурсивно)
//    std::cout << std::endl;
//    rt.print_array();

// 9. Задать целочисленный массив, состоящий из элементов 0 и 1. Например: [ 1, 1, 0, 0, 1, 0, 1, 1, 0, 0 ]. Написать функцию, заменяющую в принятом массиве 0 на 1, 1 на 0, не используя if, switch. Вывести на экран массив до изменений и после.
// 10. Написать функцию, которой на вход подаётся одномерный массив и число n (может быть положительным, или отрицательным), при этом метод должен циклически сместить все элементы массива на n позиций.

//    if(rt.CheckBalance()) { // 11. Сумма массива слева = справа bool
//        std::cout << "true" << std::endl;
//    }
//    else {
//        std::cout << "false" << std::endl;
//    }

// 12. склеить два файла, имена файлов передавать через аргументы argv, argc int main(int argc, char** argv) {concatFiles(argv[1], argv[1], argv[2]);}
// 13. написать функцию записи элементов двусвязного списка в файл

//    std::cout << rt.fib(12); // 14. Вывести число Фибоначи под номером (рекурсивно)

// 15. Написать функцию удаления из конца строки символов: .,!?"+=- и других (рекурсивно)

    return a.exec();
}


